# -*- coding: utf-8 -*-
"""Data_Science_Capstone_Final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13XjZK3RIbl7oIEUkXzs1lcfUHrHJQMF8

<h1>Data Science Capstone Assignment</h1>
"""

!pip install bs4
import numpy as np # library to handle data in a vectorized manner

import pandas as pd # library for data analsysis
pd.set_option('display.max_columns', None)
pd.set_option('display.max_rows', None)

import json # library to handle JSON files

!conda install -c conda-forge geopy --yes # uncomment this line if you haven't completed the Foursquare API lab
from geopy.geocoders import Nominatim # convert an address into latitude and longitude values

import requests # library to handle requests
from pandas.io.json import json_normalize # tranform JSON file into a pandas dataframe

# Matplotlib and associated plotting modules
import matplotlib.cm as cm
import matplotlib.colors as colors

# import k-means from clustering stage
from sklearn.cluster import KMeans

# for webscraping import Beautiful Soup 
from bs4 import BeautifulSoup

import xml

!conda install -c conda-forge folium=0.5.0 --yes # uncomment this line if you haven't completed the Foursquare API lab
import folium # map rendering library

print('Libraries imported.')

CLIENT_ID = 'MH5NCUXRK0SVDC2I45KYIQ3GVSB0AONXJCEGBS0NG31TU12H' 
CLIENT_SECRET = 'B4H3QD4UW0H2EAIJ3PZB2XWW335K1Q1RDIHIV32WD3E4Q5O1' 
VERSION = '20180605'

import requests
from bs4 import BeautifulSoup
import numpy as np
import pandas as pd
from urllib.request import urlopen
url = 'https://www.nriol.com/india-statistics/tamilnadu/districts.asp'
html = urlopen(url) 
soup = BeautifulSoup(html, 'html.parser')
tables = soup.find('table')
fields=tables.find_all("td")

fields

District = []
Area = []
Population=[]


for i in range(0, len(fields),5):
    District.append(fields[i+1].text.strip())
    Area.append(fields[i+2].text.strip())
    Population.append(fields[i+3].text.strip())

District

Area

Population

df = pd.DataFrame(data=[District,Area,Population]).transpose()

"""<h1>Dataframe formed from the data webscrapped from the official NRIO website</h1>"""

df

df.columns=['Name of District','Area(sq km)','Population']
df.head()

df.dtypes

df['Area(sq km)']=df['Area(sq km)'].str.replace(",","")
df['Population']=df['Population'].str.replace(",","")

df[['Area(sq km)','Population']]=df[['Area(sq km)','Population']].astype('float64')

df.head()

"""<h1>Dataframe formed from the data webscrapped from the official NRIO website with the latitude and longitude details from thr Nominatin function</h1>"""

Latitude=[]
Longitude=[]
for i in range(0,df.shape[0]):
    geolocator=Nominatim(user_agent="Shreebuvan")
    location = geolocator.geocode(df["Name of District"].iloc[i])
    Latitude.append(location.latitude)
    Longitude.append(location.longitude)
Latitude=pd.DataFrame(Latitude)
Longitude=pd.DataFrame(Longitude)
df[["Latitude"]]=Latitude
df[["Longitude"]]=Longitude
df

df_density=df['Population']/df['Area(sq km)']
df_density.index=df['Name of District']
df_density

"""<h1>Distribution chart of the population denstity spread accross the various districts in Tamilnadu</h1>"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib.pyplot as plt
df_density.plot(kind='pie',figsize=(10,10))
plt.xlabel('Population per km^2')
plt.ylabel('')

"""<h1>Data for the available Hospitals in the given radius from the foursquare API</h1>"""

Results=[]
radius = 5000
LIMIT = 100
categoryId="4bf58dd8d48988d196941735"
for i in range(1,len(df)):
        Name,lat,lon=df[['Name of District','Latitude','Longitude']].iloc[i]
        url = 'https://api.foursquare.com/v2/venues/explore?&client_id={}&client_secret={}&v={}&ll={},{}&radius={}&categoryId={}&limit={}'.format(
        CLIENT_ID, 
        CLIENT_SECRET, 
        VERSION, 
        lat, 
        lon, 
        radius,
        categoryId,
        LIMIT)
        Results.append(requests.get(url).json())

Results

venues=[]
for i in range(0,len(Results)):
    results=Results[i]
    venues.extend(results['response']['groups'][0]['items'])

def get_category_type(row):
    try:
        categories_list = row['categories']
    except:
        categories_list = row['venue.categories']
        
    if len(categories_list) == 0:
        return None
    else:
        return categories_list[0]['name']

nearby_hospitals = json_normalize(venues)
nearby_hospitals.columns

nearby_hospitals['venue.categories'][0]

"""<h1>Retrieving only the category name</h1>"""

#cleaning columns
for i in range(nearby_hospitals.shape[0]):
  nearby_hospitals['venue.categories'].iloc[i]=nearby_hospitals['venue.categories'][i][0]['name']

"""<h1>Cleaned dataframe </h1>"""

filtered_columns = ['venue.name', 'venue.categories', 'venue.location.lat', 'venue.location.lng']
nearby_hospitals =nearby_hospitals.loc[:, filtered_columns]
nearby_hospitals

"""<h1>Renaming the columns in the dataframe </h1>"""

nearby_hospitals.columns = [col.split(".")[-1] for col in nearby_hospitals.columns]

nearby_hospitals.drop_duplicates(inplace=True)
nearby_hospitals=nearby_hospitals.set_index("name")
nearby_hospitals=nearby_hospitals.reset_index()
nearby_hospitals

"""<h1>Data for the available Medical Supply Stores in the given radius from the foursquare API</h1>"""

Results_medical_supply_store=[]
venues_medical_supply_store=[]
radius = 5000
LIMIT = 100
categoryId="58daa1558bbb0b01f18ec206"
for i in range(1,len(df)):
        Name,lat,lon=df[['Name of District','Latitude','Longitude']].iloc[i]
        url = 'https://api.foursquare.com/v2/venues/explore?&client_id={}&client_secret={}&v={}&ll={},{}&radius={}&categoryId={}&limit={}'.format(
        CLIENT_ID, 
        CLIENT_SECRET, 
        VERSION, 
        lat, 
        lon, 
        radius,
        categoryId,
        LIMIT)
        Results_medical_supply_store.append(requests.get(url).json())

Results_medical_supply_store

for i in range(0,len(Results_medical_supply_store)):
    results=Results_medical_supply_store[i]
    venues_medical_supply_store.extend(results['response']['groups'][0]['items'])

nearby_medicalsupply = json_normalize(venues_medical_supply_store)
nearby_medicalsupply.columns

filtered_columns = ['venue.name', 'venue.categories', 'venue.location.lat', 'venue.location.lng']
nearby_medicalsupply =nearby_medicalsupply.loc[:, filtered_columns]
nearby_medicalsupply

"""<h1>Retrieving only the category name</h1>"""

#cleaning columns
for i in range(nearby_medicalsupply.shape[0]):
  nearby_medicalsupply['venue.categories'].iloc[i]=nearby_medicalsupply['venue.categories'][i][0]['name']

"""<h1>Cleaned dataframe </h1>"""

nearby_medicalsupply

"""<h1>Renaming the columns in the dataframe </h1>"""

nearby_medicalsupply.columns = [col.split(".")[-1] for col in nearby_medicalsupply.columns]

nearby_medicalsupply.drop_duplicates(inplace=True)
nearby_medicalsupply=nearby_medicalsupply.set_index("name")
nearby_medicalsupply=nearby_medicalsupply.reset_index()
nearby_medicalsupply

"""<h1>Data for the available Medical Labs in the given radius from the foursquare API</h1>"""

Results_medical_labs=[]
venues_medical_labs=[]
radius = 5000
LIMIT = 100
categoryId="4f4531b14b9074f6e4fb0103"
for i in range(1,len(df)):
        Name,lat,lon=df[['Name of District','Latitude','Longitude']].iloc[i]
        url = 'https://api.foursquare.com/v2/venues/explore?&client_id={}&client_secret={}&v={}&ll={},{}&radius={}&categoryId={}&limit={}'.format(
        CLIENT_ID, 
        CLIENT_SECRET, 
        VERSION, 
        lat, 
        lon, 
        radius,
        categoryId,
        LIMIT)
        Results_medical_labs.append(requests.get(url).json())

Results_medical_labs

for i in range(0,len(Results_medical_labs)):
  if Results_medical_labs[i]['meta']['code']!=200:
    results=Results_medical_supply_store[i]
    venues_medical_labs.extend(results['response']['groups'][0]['items'])

nearby_medical_labs = json_normalize(venues_medical_labs)
nearby_medical_labs.columns

filtered_columns = ['venue.name', 'venue.categories', 'venue.location.lat', 'venue.location.lng']
nearby_medical_labs=nearby_medical_labs.loc[:, filtered_columns]
nearby_medical_labs

"""<h1>Retrieving only the category name</h1>"""

#cleaning columns
for i in range(nearby_medical_labs.shape[0]):
  nearby_medical_labs['venue.categories'].iloc[i]=nearby_medical_labs['venue.categories'][i][0]['name']

"""<h1>Cleaned dataframe </h1>"""

nearby_medical_labs

"""<h1>Renaming the columns in the dataframe </h1>"""

nearby_medical_labs.columns = [col.split(".")[-1] for col in nearby_medical_labs.columns]

nearby_medical_labs.drop_duplicates(inplace=True)
nearby_medical_labs=nearby_medical_labs.set_index("name")
nearby_medical_labs=nearby_medical_labs.reset_index()
nearby_medical_labs

"""<h1>Data for the available Emergency centers in the given radius from the foursquare API</h1>"""

Results_emergency_centers=[]
venues_emergency_centers=[]
radius = 5000
LIMIT = 100
categoryId="4bf58dd8d48988d194941735"
for i in range(1,len(df)):
        Name,lat,lon=df[['Name of District','Latitude','Longitude']].iloc[i]
        url = 'https://api.foursquare.com/v2/venues/explore?&client_id={}&client_secret={}&v={}&ll={},{}&radius={}&categoryId={}&limit={}'.format(
        CLIENT_ID, 
        CLIENT_SECRET, 
        VERSION, 
        lat, 
        lon, 
        radius,
        categoryId,
        LIMIT)
        Results_emergency_centers.append(requests.get(url).json())

Results_emergency_centers

for i in range(0,len(Results_emergency_centers)):
    results=Results_emergency_centers[i]
    venues_emergency_centers.extend(results['response']['groups'][0]['items'])

nearby_emergency_centres = json_normalize(venues_emergency_centers)
nearby_emergency_centres.columns

"""<h1>Data for the available Emergency centers in the given radius </h1>"""

filtered_columns = ['venue.name', 'venue.categories', 'venue.location.lat', 'venue.location.lng']
nearby_emergency_centres =nearby_emergency_centres.loc[:, filtered_columns]
nearby_emergency_centres

"""<h1>Retrieving only the category name</h1>"""

#cleaning columns
for i in range(nearby_emergency_centres.shape[0]):
  nearby_emergency_centres['venue.categories'].iloc[i]=nearby_emergency_centres['venue.categories'][i][0]['name']

"""<h1>Cleaned dataframe </h1>"""

nearby_emergency_centres

"""<h1>Renaming the columns in the dataframe </h1>"""

nearby_emergency_centres.columns = [col.split(".")[-1] for col in nearby_emergency_centres.columns]

nearby_emergency_centres.drop_duplicates(inplace=True)
nearby_emergency_centres=nearby_emergency_centres.set_index("name")
nearby_emergency_centres=nearby_emergency_centres.reset_index()
nearby_emergency_centres

"""<h1>Merging data for the available Hospitals, Medical Supply, Medical Labs, Emergency centers in the given radius </h1>"""

df_Tamilnadu_Health_Centers = pd.concat([nearby_hospitals, nearby_medicalsupply, nearby_medical_labs,nearby_emergency_centres], ignore_index=True)
df_Tamilnadu_Health_Centers

address = 'Tamilnadu, India'

geolocator = Nominatim(user_agent="tamilnadu_shree")
location = geolocator.geocode(address)
latitude = location.latitude
longitude = location.longitude
print('The geograpical coordinate of Tamilnadu are {}, {}.'.format(latitude, longitude))

"""<h1>Map for the available Hospitals, Medical Labs, Medical Supply, Emergency centers in the given radius </h1>"""

Tamilnadu_map = folium.Map(location=[latitude,longitude], zoom_start=7)

for lat, lng, name, categories in zip(df_Tamilnadu_Health_Centers['lat'], df_Tamilnadu_Health_Centers['lng'],df_Tamilnadu_Health_Centers['name'], df_Tamilnadu_Health_Centers['categories']):
    label = '{}'.format(name)
    label = folium.Popup(label, parse_html=True)
    folium.CircleMarker(
        [lat, lng],
        radius=5,
        popup=label,
        color='red',
        fill=True,
        fill_color='red',
        fill_opacity=0.7,
        parse_html=False).add_to(Tamilnadu_map)  
    
Tamilnadu_map

"""<h1>Map for the available Hospitals in the given radius </h1>"""

Tamilnadu_map = folium.Map(location=[latitude, longitude], zoom_start=7)

for lat, lng, name, categories in zip(nearby_hospitals['lat'], nearby_hospitals['lng'],nearby_hospitals['name'], nearby_hospitals['categories']):
    label = '{}'.format(name)
    label = folium.Popup(label, parse_html=True)
    folium.CircleMarker(
        [lat, lng],
        radius=5,
        popup=label,
        color='blue',
        fill=True,
        fill_color='blue',
        fill_opacity=0.7,
        parse_html=False).add_to(Tamilnadu_map)  
    
Tamilnadu_map

"""<h1>Map for the available Medical Supply in the given radius </h1>"""

Tamilnadu_map = folium.Map(location=[latitude, longitude], zoom_start=7)

for lat, lng, name, categories in zip(nearby_medicalsupply['lat'], nearby_medicalsupply['lng'],nearby_medicalsupply['name'], nearby_medicalsupply['categories']):
    label = '{}'.format(name)
    label = folium.Popup(label, parse_html=True)
    folium.CircleMarker(
        [lat, lng],
        radius=5,
        popup=label,
        color='red',
        fill=True,
        fill_color='red',
        fill_opacity=0.7,
        parse_html=False).add_to(Tamilnadu_map)  
    
Tamilnadu_map

"""<h1>Map for the available Medical Labs in the given radius </h1>"""

Tamilnadu_map = folium.Map(location=[latitude, longitude], zoom_start=7)

for lat, lng, name, categories in zip(nearby_medical_labs['lat'], nearby_medical_labs['lng'],nearby_medical_labs['name'], nearby_medical_labs['categories']):
    label = '{}'.format(name)
    label = folium.Popup(label, parse_html=True)
    folium.CircleMarker(
        [lat, lng],
        radius=5,
        popup=label,
        color='blue',
        fill=True,
        fill_color='blue',
        fill_opacity=0.7,
        parse_html=False).add_to(Tamilnadu_map)  
    
Tamilnadu_map

"""<h1>Map for the available Emergency centers in the given radius </h1>"""

Tamilnadu_map = folium.Map(location=[latitude, longitude], zoom_start=7)

for lat, lng, name, categories in zip(nearby_emergency_centres['lat'], nearby_emergency_centres['lng'],nearby_emergency_centres['name'], nearby_emergency_centres['categories']):
    label = '{}'.format(name)
    label = folium.Popup(label, parse_html=True)
    folium.CircleMarker(
        [lat, lng],
        radius=5,
        popup=label,
        color='red',
        fill=True,
        fill_color='red',
        fill_opacity=0.7,
        parse_html=False).add_to(Tamilnadu_map)  
    
Tamilnadu_map

"""<h1>In the following cells I do the k-means for clustering the Hospitals, MedicalSupply, Medical labs, Emergency_Centers</h1>"""

from sklearn.cluster import KMeans
import seaborn as sns; sns.set()
import csv

df_kmeans=df_Tamilnadu_Health_Centers

K_clusters = range(1,10)
kmeans = [KMeans(n_clusters=i) for i in K_clusters]
Y_axis = df_kmeans[['lat']]
X_axis = df_kmeans[['lng']]
score = [kmeans[i].fit(Y_axis).score(Y_axis) for i in range(len(kmeans))]
# Visualize
plt.plot(K_clusters, score)
plt.xlabel('Number of Clusters')
plt.ylabel('Score')
plt.title('Elbow Curve')
plt.show()

"""<h2>From the above graph for elbow method 2 clusters is ideal</h2>"""

kmeans = KMeans(n_clusters = 2, init ='k-means++')
kmeans.fit(df_kmeans[df_kmeans.columns[3:5]]) # Compute k-means clustering.
df_kmeans['cluster_label'] = kmeans.fit_predict(df_kmeans[df_kmeans.columns[2:4]])
centers = kmeans.cluster_centers_ # Coordinates of cluster centers.
labels = kmeans.predict(df_kmeans[df_kmeans.columns[2:4]]) # Labels of each point
df_kmeans

"""<h1>Cluster number is added to all the categories and the motive of this capstone project comes to an end</h1>"""



